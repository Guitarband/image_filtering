using System;
using System.Drawing;
using System.Windows.Forms;


namespace ImageFilter
{
    public partial class ImageFilter : Form
    {
        public ImageFilter()
        {
            InitializeComponent();
        }

        private void ImageFilter_Load(object sender, EventArgs e)
        {
            Bitmap bitmap = new Bitmap("test.jpg");
            pctBxSource.Image = bitmap;

            Bitmap source = (Bitmap)pctBxSource.Image;
            int height = source.Height;
            int width = source.Width;

            Bitmap edit = new Bitmap(width, height);
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    Color sourcePixel = source.GetPixel(x, y);
                    int r = sourcePixel.R;
                    int g = sourcePixel.G;
                    int b = sourcePixel.B;

                    Color destPixel = Color.FromArgb(r, g, b);
                    edit.SetPixel(x, y, destPixel);
                }
            }
            pctBxEdit.Image = edit;
        }

        private void openToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            openFileDialog1.Filter = "Image Files(*.jpg; *.jpeg; *.gif; *.bmp; *.png)|*.jpg; *.jpeg; *.gif; *.bmp; *.png" ;
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                string strFileName = openFileDialog1.FileName;
                lbl1.Text = ("Path: " + strFileName);
                Bitmap bitmap = new Bitmap(strFileName);
                pctBxSource.Image = bitmap;
            }
        }

        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog1 = new SaveFileDialog();
            saveFileDialog1.FileName = "unknown.jpg";
            saveFileDialog1.DefaultExt = "jpg";
            saveFileDialog1.Filter = "JPG images (*.jpg)|*.jpg";

            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                Bitmap imageToSave = (Bitmap)pctBxEdit.Image.Clone();

                imageToSave.Save(saveFileDialog1.FileName, System.Drawing.Imaging.ImageFormat.Jpeg);
            }
        }

        private void redToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Bitmap source = (Bitmap)pctBxSource.Image;
            int height = source.Height;
            int width = source.Width;

            Bitmap edit = new Bitmap(width, height);
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    Color sourcePixel = source.GetPixel(x, y);
                    int r = sourcePixel.R;
                    int g = 0;
                    int b = 0;

                    Color destPixel = Color.FromArgb(r, g, b);
                    edit.SetPixel(x, y, destPixel);
                }
            }
            pctBxEdit.Image = edit;
        }

        private void greenToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Bitmap source = (Bitmap)pctBxSource.Image;
            int height = source.Height;
            int width = source.Width;

            Bitmap edit = new Bitmap(width, height);
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    Color sourcePixel = source.GetPixel(x, y);
                    int r = 0;
                    int g = sourcePixel.G;
                    int b = 0;

                    Color destPixel = Color.FromArgb(r, g, b);
                    edit.SetPixel(x, y, destPixel);
                }
            }
            pctBxEdit.Image = edit;
        }

        private void blueToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Bitmap source = (Bitmap)pctBxSource.Image;
            int height = source.Height;
            int width = source.Width;

            Bitmap edit = new Bitmap(width, height);
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    Color sourcePixel = source.GetPixel(x, y);
                    int r = 0;
                    int g = 0;
                    int b = sourcePixel.B;

                    Color destPixel = Color.FromArgb(r, g, b);
                    edit.SetPixel(x, y, destPixel);
                }
            }
            pctBxEdit.Image = edit;
        }

        private void greyscaleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Bitmap source = (Bitmap)pctBxSource.Image;
            int height = source.Height;
            int width = source.Width;

            Bitmap edit = new Bitmap(width, height);
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    Color sourcePixel = source.GetPixel(x, y);
                    int gray = (sourcePixel.R + sourcePixel.G + sourcePixel.B) / 3;
                    int r = gray;
                    int g = gray;
                    int b = gray;

                    Color destPixel = Color.FromArgb(r, g, b);
                    edit.SetPixel(x, y, destPixel);
                }
            }
            pctBxEdit.Image = edit;
        }

        private void blackAndWhiteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Bitmap source = (Bitmap)pctBxSource.Image;
            int height = source.Height;
            int width = source.Width;

            Bitmap edit = new Bitmap(width, height);
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    Color sourcePixel = source.GetPixel(x, y);
                    int gray = (sourcePixel.R + sourcePixel.G + sourcePixel.B) / 3;
                    if (gray < 127)
                    {
                        gray = 0;
                    }
                    else
                    {
                        gray = 255;
                    }
                    int r = gray;
                    int g = gray;
                    int b = gray;

                    Color destPixel = Color.FromArgb(r, g, b);
                    edit.SetPixel(x, y, destPixel);
                }
            }
            pctBxEdit.Image = edit;
        }

        private void inversionToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Bitmap source = (Bitmap)pctBxSource.Image;
            int height = source.Height;
            int width = source.Width;

            Bitmap edit = new Bitmap(width, height);
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    Color sourcePixel = source.GetPixel(x, y);
                    int r = 255 - sourcePixel.R;
                    int g = 255 - sourcePixel.G;
                    int b = 255 - sourcePixel.B;

                    Color destPixel = Color.FromArgb(r, g, b);
                    edit.SetPixel(x, y, destPixel);
                }
            }
            pctBxEdit.Image = edit;
        }

        private void edgeDetectionToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Bitmap source = (Bitmap)pctBxSource.Image;
            float threshold = 0.06f;
            int height = source.Height;
            int width = source.Width;

            Bitmap edit = new Bitmap(width, height);
            for (int x = 1; x < width - 2; x++)
            {
                for (int y = 1; y < height - 2; y++)
                {
                    Color destPixel = Color.Black;

                    Color sourcePixel = source.GetPixel(x, y);
                    float sourceBrightness = sourcePixel.GetBrightness();

                    Color leftPixel = source.GetPixel(x - 1, y);
                    float leftBrightness = leftPixel.GetBrightness();
                    Color rightPixel = source.GetPixel(x + 1, y);
                    float rightBrightness = rightPixel.GetBrightness();

                    Color upPixel = source.GetPixel(x, y - 1);
                    float upBrightness = upPixel.GetBrightness();
                    Color downPixel = source.GetPixel(x, y + 1);
                    float downBrightness = downPixel.GetBrightness();

                    if (Math.Abs(leftBrightness - rightBrightness) > threshold || Math.Abs(upBrightness - downBrightness) > threshold)
                    {
                        destPixel = Color.White;
                    }
                    else
                    {
                        destPixel = Color.Black;
                    }
                    edit.SetPixel(x, y, destPixel);
                }
            }
            pctBxEdit.Image = edit;
        }

        private void blurToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Bitmap source = (Bitmap)pctBxSource.Image;
            int height = source.Height;
            int width = source.Width;

            Bitmap edit = new Bitmap(width, height);

            for (int run = 0; run < 1; run++)
            {
                for (int x = 2; x < width - 2; x++)
                {
                    for (int y = 2; y < height - 2; y++)
                    {
                        Color destPixel = Color.Black;

                        Color sourcePixel = source.GetPixel(x, y);

                        int r = 50;
                        int g = 50;
                        int b = 50;

                        for (int i = x - 2; i < x + 2; i++)
                        {
                            for (int j = y - 2; j < y + 2; j++)
                            {
                                Color aroundPixel = source.GetPixel(x, y);

                                r += sourcePixel.R / 25;
                                g += sourcePixel.G / 25;
                                b += sourcePixel.B / 25;
                            }
                        }

                        destPixel = Color.FromArgb(r, g, b);
                        edit.SetPixel(x, y, destPixel);
                    }
                }
            }
            pctBxEdit.Image = edit;
        }

        private void redToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            Bitmap source = (Bitmap)pctBxSource.Image;
            int height = source.Height;
            int width = source.Width;

            Bitmap edit = new Bitmap(width, height);
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    Color sourcePixel = source.GetPixel(x, y);
                    int r = sourcePixel.R;
                    int g = 0;
                    int b = 0;

                    Color destPixel = Color.White;

                    if (r > 150)
                    {
                        destPixel = Color.FromArgb(r, g, b);
                    }
                    edit.SetPixel(x, y, destPixel);
                }
            }
            pctBxEdit.Image = edit;
        }

        private void greenToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            Bitmap source = (Bitmap)pctBxSource.Image;
            int height = source.Height;
            int width = source.Width;

            Bitmap edit = new Bitmap(width, height);
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    Color sourcePixel = source.GetPixel(x, y);
                    int r = 0;
                    int g = sourcePixel.G;
                    int b = 0;

                    Color destPixel = Color.White;

                    if (g > 150)
                    {
                        destPixel = Color.FromArgb(r, g, b);
                    }
                    edit.SetPixel(x, y, destPixel);
                }
            }
            pctBxEdit.Image = edit;
        }

        private void blueToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            Bitmap source = (Bitmap)pctBxSource.Image;
            int height = source.Height;
            int width = source.Width;

            Bitmap edit = new Bitmap(width, height);
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    Color sourcePixel = source.GetPixel(x, y);
                    int r = 0;
                    int g = 0;
                    int b = sourcePixel.B;

                    Color destPixel = Color.White;

                    if (b > 150)
                    {
                        destPixel = Color.FromArgb(r, g, b);
                    }
                    edit.SetPixel(x, y, destPixel);
                }
            }
            pctBxEdit.Image = edit;
        }

        private void customToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Bitmap source = (Bitmap)pctBxSource.Image;
            int height = source.Height;
            int width = source.Width;

            Bitmap edit = new Bitmap(width, height);

            int value;

            bool rInt = false;
            bool gInt = false;
            bool bInt = false;

            if (int.TryParse(txtBxRed.Text, out value))
            {
                rInt = true;
                if (Convert.ToInt32(txtBxRed.Text) > 255)
                {
                    txtBxRed.Text = Convert.ToString(255);
                }
                else if (Convert.ToInt32(txtBxRed.Text) < 0)
                {
                    txtBxRed.Text = Convert.ToString(0);
                }

            }
            else
            {
                txtBxRed.Text = Convert.ToString(0);
            }

            if (int.TryParse(txtBxGreen.Text, out value))
            {
                gInt = true;
                if (Convert.ToInt32(txtBxGreen.Text) > 255)
                {
                    txtBxGreen.Text = Convert.ToString(255);
                }
                else if (Convert.ToInt32(txtBxGreen.Text) < 0)
                {
                    txtBxGreen.Text = Convert.ToString(0);
                }
            }
            else
            {
                txtBxGreen.Text = Convert.ToString(0);
            }

            if (int.TryParse(txtBxBlue.Text, out value))
            {
                bInt = true;
                if (Convert.ToInt32(txtBxBlue.Text) > 255)
                {
                    txtBxBlue.Text = Convert.ToString(255);
                }
                else if (Convert.ToInt32(txtBxBlue.Text) < 0)
                {
                    txtBxBlue.Text = Convert.ToString(0);
                }
            }
            else
            {
                txtBxBlue.Text = Convert.ToString(0);
            }

            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    Color sourcePixel = source.GetPixel(x, y);

                    int r = sourcePixel.R;
                    int g = sourcePixel.G;
                    int b = sourcePixel.B;

                    if (checkBox1.Checked)
                    {
                        if (rInt == true)
                        {
                            r = Convert.ToInt32(txtBxRed.Text);
                        }
                    }
                    if (checkBox2.Checked)
                    {
                        if (rInt == true)
                        {
                            g = Convert.ToInt32(txtBxGreen.Text);
                        }
                    }
                    if (checkBox3.Checked)
                    {
                        if (rInt == true)
                        {
                            b = Convert.ToInt32(txtBxBlue.Text);
                        }
                    }


                    Color destPixel = Color.FromArgb(r, g, b);
                    edit.SetPixel(x, y, destPixel);
                }
            }
            pctBxEdit.Image = edit;
        }

        private void btnCustom_Click(object sender, EventArgs e)
        {
            Bitmap source = (Bitmap)pctBxSource.Image;
            int height = source.Height;
            int width = source.Width;

            Bitmap edit = new Bitmap(width, height);

            int value;

            bool rInt = false;
            bool gInt = false;
            bool bInt = false;

            if (int.TryParse(txtBxRed.Text, out value))
            {
                rInt = true;
                if (Convert.ToInt32(txtBxRed.Text) > 255)
                {
                    txtBxRed.Text = Convert.ToString(255);
                }
                else if (Convert.ToInt32(txtBxRed.Text) < 0)
                {
                    txtBxRed.Text = Convert.ToString(0);
                }

            }
            else
            {
                txtBxRed.Text = Convert.ToString(0);
            }

            if (int.TryParse(txtBxGreen.Text, out value))
            {
                gInt = true;
                if (Convert.ToInt32(txtBxGreen.Text) > 255)
                {
                    txtBxGreen.Text = Convert.ToString(255);
                }
                else if (Convert.ToInt32(txtBxGreen.Text) < 0)
                {
                    txtBxGreen.Text = Convert.ToString(0);
                }
            }
            else
            {
                txtBxGreen.Text = Convert.ToString(0);
            }

            if (int.TryParse(txtBxBlue.Text, out value))
            {
                bInt = true;
                if (Convert.ToInt32(txtBxBlue.Text) > 255)
                {
                    txtBxBlue.Text = Convert.ToString(255);
                }
                else if (Convert.ToInt32(txtBxBlue.Text) < 0)
                {
                    txtBxBlue.Text = Convert.ToString(0);
                }
            }
            else
            {
                txtBxBlue.Text = Convert.ToString(0);
            }


            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    Color sourcePixel = source.GetPixel(x, y);

                    int r = sourcePixel.R;
                    int g = sourcePixel.G;
                    int b = sourcePixel.B;

                    if (checkBox1.Checked)
                    {
                        if (rInt == true)
                        {
                            r = Convert.ToInt32(txtBxRed.Text);
                        }
                    }
                    if (checkBox2.Checked)
                    {
                        if (rInt == true)
                        {
                            g = Convert.ToInt32(txtBxGreen.Text);
                        }
                    }
                    if (checkBox3.Checked)
                    {
                        if (rInt == true)
                        {
                            b = Convert.ToInt32(txtBxBlue.Text);
                        }
                    }


                    Color destPixel = Color.FromArgb(r, g, b);
                    edit.SetPixel(x, y, destPixel);
                }
            }
            pctBxEdit.Image = edit;
        }
    }
}
